Preparing for the Next Wave
Tags: enterprise, go, corporate, future

Brian Ketelsen
Cloud Developer Advocate, Microsoft
bketelsen@gmail.com
https://brianketelsen.com
@bketelsen

* It's Personal

: In 2010 I deployed my first Go service to production.  It was a rewrite of a Ruby service that desperately needed concurrency to meet our SLA.  After I figured out how to use goroutines effectively it was a smashing success.  I spent the next three years applying Go to fix business problems that demanded Go's concurrency.  Together with Erik St. Martin, I built SkyNet which was a microservices platform probably just a few years ahead of its time.  SkyNet lives today, however, in the form of the DNS infrastructure in Kubernetes.
: In 2013 I co-founded a data science startup that used Go exclusively for its customer facing applications.  Hundreds of millions of transactions per day flowed through the system.  Go was predictable, reliable, and perhaps more importantly -- productive.

* I'm Invested in Go

: in 2016 I decided to leave the the startup world and make my living training Go and Kubernetes.  It was the best decision I've ever made.  I got to spend almost two years sharing my passion for Go with companies big and small.

: It was during this time that I realized that Go is here to stay.  So many big companies are investing heavily in Go... it's not just confined to the domain of startups.  The companies that hired me to train them in Go are in the Fortune 500, in the Fortune 100, and even Fortune 50.  Large companies are adopting Go for the same reasons I did.

* Today

: fast forward to 2017, and I got the opportunity to work at Microsoft.  It wasn't on my radar, and it was certainly a surprise.  But ultimately it fit with my personal goal to further the adoption and success of Go.  Microsoft didn't just "allow me" to continue to foster the Go community, they hired me because of that passion.  Microsoft sees the value in Go.  They didn't hire me in spite of being a GopherCon organizer, they hired me because of it.


* The Enterprise Moves Towards OSS

: I saw an article yesterday stating that Azure is composed of 40% linux deployments now.  

: A company that built its story on Windows has 40% of its deployments on Linux. Think about that for a moment.  The company that was built on Windows has transformed itself so much in the past 3 years that 40% of its cloud servers are Linux.

: clearly the enterprise is moving towards Open Source.  The evidence is clear:  Large companies like IBM, Apple, Microsoft, and Google have a huge investment in Open Source.  In Linux.  And from my experience over the past two years teaching, they have an investment in Go.

* Is Go Moving Towards the Enterprise?

* What is the Enterprise?

: As of July 2017 desktop market share looks like this: (1)

    85% Windows
    11% MacOS
     2%  Linux
    .5% ChromeOS

    https://www.statista.com/statistics/218089/global-market-share-of-windows-7/

.image switcher.png


* Real Talk

: I'm only tangentially invested in Windows.  Windows 10 (with the new Windows Subsystem for Linux) provides a decent place to do Linux development while providing "grown up tools" for things like VPNs, Email, and Office Applications.  


* Numbers Game

: But let's be honest amongst ourselves.  If 85% of the desktops in the world are running Windows, we're doing a disservice to potential Gophers by de-prioritizing Windows issues in Go, and ignoring enterprise software as a target for Go applications.

: As enterprise companies embrace OSS, Linux, and Go, we're in a fragile position. The Go programming language, and a vast majority of its libraries are built for an open source, cloud native platform.  Is that representative of the vast majority of potential Go users?  

* NOPE

* Enterprise Software is Different 

"Enterprise Software describes a collection of computer programs with common business applications, tools for modeling how the entire organization works, and development tools for building applications unique to the organization. The software is intended to solve an enterprise-wide problem, rather than a departmental problem. Enterprise level software aims to improve the enterprise's productivity and efficiency by providing business logic support functionality."

* Continued 

"According to Martin Fowler, 'Enterprise applications are about the display, manipulation, and storage of large amounts of often complex data and the support or automation of business processes with that data.'"

* Continued

"Although there is no single, widely accepted list of enterprise software characteristics, they generally include performance, scalability, and robustness. Furthermore, enterprise software typically has interfaces to other enterprise software (for example LDAP to directory services) and is centrally managed (a single admin page, for example)."

Wikipedia
https://en.wikipedia.org/wiki/Enterprise_software

* How is Go Positioned to Create Enterprise Software?

* Enterprise Developers are Different

: I spent 15 years writing Enterprise software.  From line of business applications to large corporate wide data management, I've got a good bit of experience writing software for big companies.

: Enterprise developers are different.  Not because they think differently, not because they like different tools, but because they have different boundaries and constraints than OSS developers.

: In a way, it's liberating.  Writing an OSS app that requires some form of authentication can be frustrating - do we use OAUTH? Keep our own database of users?  In the enterprise, that database already exists.  It's LDAP, and more than likely Active Directory. Problem solved.   mysql, postgres, mongodb?  Problem solved, it's Oracle and Microsoft SQL Server.

: Enterprise developers are often writing applications that talk to internal data storage systems that help organize and orchestrate business processes.  Their applications have a built-in captive audience for which they can make several assumptions. 

* Enterprise Software

- User is known
- Platform is known, both for deployment and consumption
- Data sources are known, and constrained  

* Please Bring This Back Around To Go, Brian??

* Using Go for Enterprise Software development

- Performance
- Scalability
- Robustness
- Interfaces to other Enterprise Software
- Centrally Managed

* Performace

: I won't claim that Go is the fastest programming language on the planet.  But I will claim that this is a non-issue for the purposes of this talk.  Go is fast, and it gets faster and better with every release. I've never tried to solve a problem that Go was too slow for.

* Scalability

: Again, Go shines here.  It's easy to scale vertically and horizontally with Go applications.  Go will use all the cores available to it, and deploying multiple copies of a service behind a load-balancer is a solved problem.  We're good here too.

* Robustness 

: Go really performs well here.  By encouraging developers to pay attention to every possible error condition and handle those errors on the spot, Go facilitates robust software development.  Another checkmark in Go's enterprise readiness column

* Interfaces to Other Enterprise Software 

: Not so good here.

Missing In Action 
 
- Solid {MSSQL,Oracle,Sybase,etc} Drivers
- Solid LDAP/AD integrations

* Centrally Managed

: depending on your definition of Centrally Managed, I'm going to say that Go doesn't satisfy this requirement.  

- Unified logging targets and formats
- Centralized configuration

* Logging 

: Logging in Go is a dumpster fire.  My biggest wish for Go 2.0 is a logger interface.  Let's solve this problem the right way in Go 2 and allow the operator, the final consumer of both packages and commands to determine how logs are formatted and stored.

: A log interface could be satisfied by a simple text file logger or a complicated log shipping package that logs to something centralized. 

* Centralized Configuration

: Windows has Active Directory for centralized policy management.  It can control nearly everything about a user's experience, and nearly everything about the configuration of desktop clients and servers.

: Enterprise software installations are also frequently controlled by central configuration systems.  An operator can make changes in a central configuration system, and the software is automatically re-configured, even if instances are currently running.

: How does this translate in Go?  We often try to build 12-factor applications with the application accepting its configuration from the environment or the command line.  Some tools like SFP13/viper allow you to set configuration from environment, command line, and even distributed key/value stores like etcd/consul.  

: the typical Go app is not expected to change configuration after it's started.  But building applications in a way where configuration values changing triggers application changes isn't difficult.  We need good library support at a storage-agnostic level. The best example I've seen yet is Go-Micro's config-srv.  It has built-in support for storing configuration in JSON format and supports watching configuration keys for easier reconfiguration of a running application.

* Frameworks and Ecosystems 

: Enterprise development in Java and .Net is currently easier than in Go, not because the languages are better suited for enterprise development, but because there are already frameworks that are built for enterprise development.

: We often poke fun at Spring Boot and other similar frameworks. Go developers don't need frameworks!  USE THE STANDARD LIBRARY! Have you stopped to think about why they're so popular? Because they provide templates to solve common problems that have already been tested and proven in the enterprise.  Enterprise developers don't have time to reinvent the wheel every time they want to solve a problem.  They need to apply known-good patterns and ship software so they can keep the business running.

: Where is the Spring Boot for Go?

* Software OSI Model 

- Enterprise Applications
- ??
- Frameworks & Toolkits (go-kit, Go Micro, Buffalo)
- Packages (net/http) 
- Standard Library 
- Operating system / Kernel

: We're missing a critical piece of the model to enable enterprise development.  We have an amazing standard library, and really well-designed toolkits like go-kit and Micro, but they operate at a level one step below the developers who are coming to Go.  We need an opinionated framework like Spring Boot for Go that is built ON top of those frameworks and toolkits.

* Spring Initializr

http://start.spring.io

.image start-spring-io.png 500 600

: This website generates the entire project, with everything configured and gives you a zip file as the output.  If you click on the "Switch to full version" link, you can change all the defaults.  Truly impressive.

* Generators

.image yeoman.png 500 600
: Nearly Every javascript framework has an equivalent Yeoman generator.  Go is behind the curve here.  Projects like micro and buffalo do a great job, but this should be the standard for every Go framework or toolkit.

* Just Use The Standard Library

: This saying needs to go away.  It makes sense when we're talking about low-level packages, and even bespoke software.  But as a mentality, it is off-putting to developers coming to Go.  


* Back to You  - The Ask

: You may never build an enterprise application in Go.  But the influx of Enterprise developers will benefit you tremendously.  More enterprise development in Go means demand for more Go developers, it means better tooling, better support for Go across service providers. 

: The first wave of Enterprise development in Go is already here.  If we help to make them welcome and successful, we have an opportunity to take Go's growth to the next level, exponential growth.  The coveted hockey stick.  If we continue to ignore them, they'll go somewhere else.  Rust, Ruby, Node. maybe even Pony. 


* Logging

- Fix Logging in Go 2.0 or SOONER
   make logging an interface, build your fancy things on top

* Frameworks

- Start to think above the toolkit
   today we're plumbers, but we need to plan for the General Contractors

* Helpful Resources for Newcomers

- Write your version of _Why's Poignant Guide To Ruby 
   community curated, open source resources for learning Go

: Announcing learn-golang.com - crowd sourced Go book targeted at experienced developers coming from other languages.  Initial push of content will come from my training material, but it is just a starting point.  All contributions welcomed, large and small.

* Standardize, Reduce Choices

- Consolidate and standardize where you can
   work with others to build consistency in our ecosystem
   find best-practices and make them stand-alone packages

go-kit but at the Apache-Commons level!

Announcing gopher.rocks/commons - apache-commons for Go.  The package one step above standard library for code that we all write over and over.

* Fin 

: My request to you is simple.  Join with me to make Go the best place for newcomers.  As Dave Cheney is fond of saying: A rising tide floats all boats.
: Let's make it rain!